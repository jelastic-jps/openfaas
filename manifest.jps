type: install
version: 1.5.2
id: open-faas
baseUrl: https://github.com/jelastic-jps/openfaas/blob/master
description:
  text: /text/description.md
  short: OpenFaas (Functions-as-a-Service) - is a framework for building Serverless Functions
categories:
  - apps/clusters
  - apps/dev-and-admin-tools
logo: /images/openfaas-logo.png
name: OpenFaaS
targetRegions:
  type: vz7

onBeforeInit: |
  var install = true, markup = "", cur = null, text = "used";
  var settings = jps.settings || {fields: []};
  var fields = settings.fields;
  var quotas = jelastic.billing.account.GetQuotas('environment.docker.enabled' + ";" + 'enviroment.externalip.enabled' + ";" + 'environment.externalip.maxcount' + ";" + 'environment.externalip.maxcount.per.node' + ";" + 'environment.maxnodescount' + ";" + 'environment.maxsamenodescount').array;
  for (var i = 0; i < quotas.length; i++){
    var q = quotas[i], n = toNative(q.quota.name);  
    if (n == 'environment.docker.enabled' && !q.value){
      err(q, "required", "1", true);
      install = false;
    }
    if (n == 'environment.externalip.enabled' && !q.value){
      if (!markup) err(q, "required", "1", true);
      install = false;
    }
    if (n == 'environment.externalip.maxcount' && q.value < 1){
      if (!markup) err(q, "required", "1", true);
      install = false;
    }
    if (n == 'environment.externalip.maxcount.per.node' && q.value < 1){
      if (!markup) err(q, "required", "1", true);
      install = false;
    }
    if (n == 'environment.maxnodescount' && q.value < 2){
      if (!markup) err(q, "required", "2", true);
      install = false;
    }
    if (n == 'environment.maxsamenodescount' && q.value < 1){
      if (!markup) err(q, "required", "1", true);
      install = false;
    } 
  }

  if (!install) {
    fields.push(
        {"type": "compositefield","height": 0,"hideLabel": true,"width": 0,"items": [{"height": 0,"type": "string","required": true}]},
        {"type": "displayfield","cls": "warning","height": 30,"hideLabel": true,"hidden": false,"markup": markup + " Please upgrade your account."}
    );
  }
  return { result: 0, settings: settings };

  function err(e, text, cur, override){
    var m = (e.quota.description || e.quota.name) + " - " + e.value + ", " + text + " - " + cur + ". ";
    if (override) markup = m; else markup += m;
  }

requiredFeatures: extip

globals: 
  user: openfaas-${fn.random(1000)}
  password: ${fn.password(20)}

settings:
  fields:
    - caption: Env Name  
      type: envname
      name: envName
      dependsOn: region
      randomName: true
      showFullDomain: true
      required: true

    - caption: Region
      type: regionlist
      name: region
      disableInactive: true
      selectFirstAvailable: true
      filter:
        type: ["vz7"]
        isActive: true
 
onInstall:
  # gettting envGroups via script - temporary workaround while placeholder envGroups is not implemented  
  - script: return {result:0, envGroups:eval('(' + MANIFEST + ')').envGroups}
  - install: 
      jps: https://raw.githubusercontent.com/jelastic-jps/docker-native/master/docker-swarm/manifest.jps
      envName: ${settings.envName}
      envGroups: ${response.envGroups}
      region: ${settings.region}
      settings:
        mngr: 1
        worker: 1
        autoscaling: true
        stack: deploy
        yml: https://github.com/jelastic/faas/blob/master/docker-compose.yml
        stackName: func
        preHook: |-
          printf '${globals.user}' | docker secret create basic-auth-user -
          printf '${globals.password}' | docker secret create basic-auth-password -
  - env.control.GetEnvInfo:
      envName: ${settings.envName}
  - setGlobals:
      startPage: http://${response.env.domain}:8080/

startPage: ${globals.startPage}
success: /text/success.md
